
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


st.set_page_config(page_title="Dashboard de Videojuegos", layout="wide")
st.title("游꿡 Dashboard de Videojuegos")

# Funci칩n para cargar y preprocesar los datos
# @st.cache_data decora la funci칩n para cachear los datos, mejorando el rendimiento
@st.cache_data
def cargar_datos():
    # Carga el archivo CSV
    df = pd.read_csv("games.csv")
    # Convierte los nombres de las columnas a min칰sculas para facilitar el acceso
    df.columns = [col.lower() for col in df.columns]
    # Calcula las ventas totales sumando las ventas por regi칩n
    df["total_sales"] = df[['na_sales', 'eu_sales', 'jp_sales', 'other_sales']].sum(axis=1)
    return df

# Carga los datos al iniciar la aplicaci칩n
df = cargar_datos()

# --- Funciones para generar gr치ficos existentes ---

# Gr치fico de duraci칩n de plataformas activas
def duracion_plataformas(df):
    st.subheader("Duraci칩n de plataformas activas")
    # Agrupa por plataforma y calcula el a침o m칤nimo y m치ximo de lanzamiento
    duracion = df.groupby('platform')['year_of_release'].agg(['min', 'max'])
    # Calcula la duraci칩n restando el a침o m칤nimo del m치ximo
    duracion['duraci칩n'] = duracion['max'] - duracion['min']
    # Ordena y selecciona las 15 plataformas principales por duraci칩n
    duracion = duracion.sort_values('duraci칩n', ascending=False).head(15)

    # Crea el gr치fico de barras usando Matplotlib y Seaborn
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(data=duracion, x=duracion.index, y="duraci칩n", palette="viridis", ax=ax)
    ax.set_title("Top plataformas por a침os activos")
    ax.set_ylabel("A침os activos")
    ax.set_xlabel("Plataforma")
    # Muestra el gr치fico en Streamlit
    st.pyplot(fig)

# Gr치fico de plataformas activas por a침o
def plataformas_activas_por_anio(df):
    st.subheader("Plataformas activas por a침o")
    # Elimina filas con valores nulos en 'year_of_release'
    df_activo = df.dropna(subset=['year_of_release'])
    # Cuenta el n칰mero 칰nico de plataformas por a침o de lanzamiento
    conteo = df_activo.groupby('year_of_release')['platform'].nunique()

    # Crea el gr치fico de l칤nea
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.lineplot(data=conteo, marker="o", ax=ax)
    ax.set_title("Cantidad de plataformas activas por a침o")
    ax.set_ylabel("N칰mero de plataformas")
    ax.set_xlabel("A침o")
    st.pyplot(fig)

# Gr치fico de top plataformas por ventas totales
def top_plataformas(df):
    st.subheader("Top plataformas por ventas totales")
    # Agrupa por plataforma y suma las ventas totales, luego selecciona las 15 principales
    ventas = df.groupby("platform")["total_sales"].sum().sort_values(ascending=False).head(15)

    # Crea el gr치fico de barras horizontales
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x=ventas.values, y=ventas.index, palette="coolwarm", ax=ax)
    ax.set_title("Plataformas con mayores ventas")
    ax.set_xlabel("Ventas (millones)")
    ax.set_ylabel("Plataforma")
    st.pyplot(fig)

# Gr치fico para comparar ventas por regi칩n de una plataforma seleccionada
def comparar_ventas_por_plataforma(df):
    st.subheader("Ventas por regi칩n seg칰n plataforma")
    # Obtiene todas las plataformas 칰nicas y las ordena
    plataformas = df['platform'].dropna().unique()
    seleccion = st.selectbox("Elige una plataforma", sorted(plataformas))

    # Filtra los datos por la plataforma seleccionada
    filtro = df[df['platform'] == seleccion]
    # Columnas de ventas por regi칩n
    columnas = ['na_sales', 'eu_sales', 'jp_sales', 'other_sales']
    # Suma las ventas por regi칩n para la plataforma filtrada
    ventas = filtro[columnas].sum()

    # Crea el gr치fico de barras
    fig, ax = plt.subplots(figsize=(8, 5))
    ventas.plot(kind='bar', color='skyblue', ax=ax)
    ax.set_title(f"Ventas totales en regiones para {seleccion}")
    ax.set_ylabel("Millones")
    st.pyplot(fig)

# Gr치fico para comparar ventas entre dos plataformas seleccionadas
def comparador_estadistico_ventas(df):
    st.subheader("Comparador de ventas entre plataformas")
    # Obtiene opciones para las dos plataformas a comparar
    opciones = sorted(df['platform'].dropna().unique())
    p1 = st.selectbox("Plataforma A", opciones, index=0) # Plataforma A
    p2 = st.selectbox("Plataforma B", opciones, index=1) # Plataforma B

    columnas = ['na_sales', 'eu_sales', 'jp_sales', 'other_sales']
    # Filtra los datos para ambas plataformas
    datos = df[df['platform'].isin([p1, p2])]
    # Agrupa por plataforma y suma las ventas por regi칩n, luego transpone el resultado
    resumen = datos.groupby('platform')[columnas].sum().T

    # Crea el gr치fico de barras comparativo
    fig, ax = plt.subplots(figsize=(10, 5))
    resumen.plot(kind='bar', ax=ax)
    ax.set_title("Comparador de ventas por regi칩n")
    ax.set_ylabel("Millones de unidades")
    st.pyplot(fig)

# --- Nueva funci칩n para la distribuci칩n de ventas por plataforma (Histograma/Violin Plot) ---
def distribucion_ventas_por_plataforma(df):
    st.subheader("Distribuci칩n de Ventas por Plataforma")

    # Dropdown para seleccionar el tipo de gr치fico
    tipo_grafico = st.selectbox(
        "Selecciona el tipo de gr치fico",
        ("Histograma", "Violin Plot")
    )

    # Obtiene las plataformas 칰nicas y las ordena para el dropdown
    plataformas_disponibles = sorted(df['platform'].dropna().unique())
    plataforma_seleccionada = st.selectbox(
        "Selecciona una plataforma",
        plataformas_disponibles
    )

    # Filtra los datos para la plataforma seleccionada
    df_filtrado = df[df['platform'] == plataforma_seleccionada]

    # Verifica si hay datos para la plataforma seleccionada
    if df_filtrado.empty:
        st.warning(f"No hay datos de ventas para la plataforma '{plataforma_seleccionada}'. Por favor, elige otra.")
        return

    # Crea el gr치fico
    fig, ax = plt.subplots(figsize=(10, 6))

    if tipo_grafico == "Histograma":
        # Crea un histograma de las ventas totales
        sns.histplot(df_filtrado['total_sales'], kde=True, ax=ax, color='skyblue', bins=30)
        ax.set_title(f"Histograma de Ventas Totales para {plataforma_seleccionada}")
        ax.set_xlabel("Ventas Totales (millones)")
        ax.set_ylabel("Frecuencia")
    elif tipo_grafico == "Violin Plot":
        # Crea un violin plot de las ventas totales
        sns.violinplot(y=df_filtrado['total_sales'], ax=ax, color='lightgreen')
        ax.set_title(f"Violin Plot de Ventas Totales para {plataforma_seleccionada}")
        ax.set_ylabel("Ventas Totales (millones)")
        ax.set_xlabel("") # No se necesita etiqueta en el eje X para un solo viol칤n
    
    st.pyplot(fig)

# --- L칩gica principal de la aplicaci칩n con la barra lateral ---

# Selector de m칩dulo en la barra lateral
modulo = st.sidebar.radio("Selecciona m칩dulo", ["Generales", "Ventas"])

# Condicional para mostrar las opciones del m칩dulo seleccionado
if modulo == "Generales":
    opcion = st.sidebar.selectbox("An치lisis general", [
        "Duraci칩n de plataformas",
        "Plataformas activas por a침o",
        "Top plataformas por ventas",
        "Distribuci칩n de ventas por plataforma" # Nueva opci칩n
    ])
    if opcion == "Duraci칩n de plataformas":
        duracion_plataformas(df)
    elif opcion == "Plataformas activas por a침o":
        plataformas_activas_por_anio(df)
    elif opcion == "Top plataformas por ventas":
        top_plataformas(df)
    elif opcion == "Distribuci칩n de ventas por plataforma": # Llama a la nueva funci칩n
        distribucion_ventas_por_plataforma(df)
else: # M칩dulo de Ventas
    opcion = st.sidebar.selectbox("An치lisis de ventas", [
        "Ventas por plataforma",
        "Comparador estad칤stico"
    ])
    if opcion == "Ventas por plataforma":
        comparar_ventas_por_plataforma(df)
    else:
        comparador_estadistico_ventas(df)
        
