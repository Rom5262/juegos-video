
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


st.set_page_config(page_title="Dashboard de Videojuegos", layout="wide")
st.title("游꿡 Dashboard de Videojuegos")

# Funci칩n para cargar y preprocesar los datos
# @st.cache_data decora la funci칩n para cachear los datos, mejorando el rendimiento
@st.cache_data
def cargar_datos():
    # Carga el archivo CSV
    df = pd.read_csv("games.csv")
    # Convierte los nombres de las columnas a min칰sculas para facilitar el acceso
    df.columns = [col.lower() for col in df.columns]
    # Convierte 'year_of_release' a entero y maneja NaN.
    # Es importante hacer esto antes de filtrar por a침os, ya que el deslizador espera enteros.
    df['year_of_release'] = pd.to_numeric(df['year_of_release'], errors='coerce')
    df = df.dropna(subset=['year_of_release']) # Elimina filas con NaN en year_of_release despu칠s de la conversi칩n
    df['year_of_release'] = df['year_of_release'].astype(int)

    # Calcula las ventas totales sumando las ventas por regi칩n
    df["total_sales"] = df[['na_sales', 'eu_sales', 'jp_sales', 'other_sales']].sum(axis=1)
    return df

# Carga los datos al iniciar la aplicaci칩n
df = cargar_datos()

# --- Funciones para generar gr치ficos existentes ---

# Gr치fico de duraci칩n de plataformas activas
def duracion_plataformas(df_filtered):
    st.subheader("Duraci칩n de plataformas activas")
    # Agrupa por plataforma y calcula el a침o m칤nimo y m치ximo de lanzamiento
    # Aseg칰rate de que 'year_of_release' sea num칠rico para estas operaciones
    duracion = df_filtered.groupby('platform')['year_of_release'].agg(['min', 'max'])
    # Calcula la duraci칩n restando el a침o m칤nimo del m치ximo
    duracion['duraci칩n'] = duracion['max'] - duracion['min']
    # Ordena y selecciona las 15 plataformas principales por duraci칩n
    duracion = duracion.sort_values('duraci칩n', ascending=False).head(15)

    # Crea el gr치fico de barras usando Matplotlib y Seaborn
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(data=duracion, x=duracion.index, y="duraci칩n", palette="viridis", ax=ax)
    ax.set_title("Top plataformas por a침os activos")
    ax.set_ylabel("A침os activos")
    ax.set_xlabel("Plataforma")
    # Muestra el gr치fico en Streamlit
    st.pyplot(fig)

# Gr치fico de plataformas activas por a침o
def plataformas_activas_por_anio(df_filtered):
    st.subheader("Plataformas activas por a침o")
    # Cuenta el n칰mero 칰nico de plataformas por a침o de lanzamiento
    conteo = df_filtered.groupby('year_of_release')['platform'].nunique()

    # Crea el gr치fico de l칤nea
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.lineplot(data=conteo, marker="o", ax=ax)
    ax.set_title("Cantidad de plataformas activas por a침o")
    ax.set_ylabel("N칰mero de plataformas")
    ax.set_xlabel("A침o")
    st.pyplot(fig)

# Gr치fico de top plataformas por ventas totales
def top_plataformas(df_filtered):
    st.subheader("Top plataformas por ventas totales")
    # Agrupa por plataforma y suma las ventas totales, luego selecciona las 15 principales
    ventas = df_filtered.groupby("platform")["total_sales"].sum().sort_values(ascending=False).head(15)

    # Crea el gr치fico de barras horizontales
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x=ventas.values, y=ventas.index, palette="coolwarm", ax=ax)
    ax.set_title("Plataformas con mayores ventas")
    ax.set_xlabel("Ventas (millones)")
    ax.set_ylabel("Plataforma")
    st.pyplot(fig)

# Gr치fico para comparar ventas por regi칩n de una plataforma seleccionada
def comparar_ventas_por_plataforma(df_filtered):
    st.subheader("Ventas por regi칩n seg칰n plataforma")
    # Obtiene todas las plataformas 칰nicas y las ordena
    plataformas = df_filtered['platform'].dropna().unique()
    seleccion = st.selectbox("Elige una plataforma", sorted(plataformas))

    # Filtra los datos por la plataforma seleccionada
    filtro = df_filtered[df_filtered['platform'] == seleccion]
    # Columnas de ventas por regi칩n
    columnas = ['na_sales', 'eu_sales', 'jp_sales', 'other_sales']
    # Suma las ventas por regi칩n para la plataforma filtrada
    ventas = filtro[columnas].sum()

    # Crea el gr치fico de barras
    fig, ax = plt.subplots(figsize=(8, 5))
    ventas.plot(kind='bar', color='skyblue', ax=ax)
    ax.set_title(f"Ventas totales en regiones para {seleccion}")
    ax.set_ylabel("Millones")
    st.pyplot(fig)

# Gr치fico para comparar ventas entre dos plataformas seleccionadas
def comparador_estadistico_ventas(df_filtered):
    st.subheader("Comparador de ventas entre plataformas")
    # Obtiene opciones para las dos plataformas a comparar
    opciones = sorted(df_filtered['platform'].dropna().unique())
    # Manejo de 칤ndices para evitar errores si hay menos de 2 plataformas
    p1_index = 0 if len(opciones) > 0 else None
    p2_index = 1 if len(opciones) > 1 else (0 if len(opciones) == 1 else None)

    p1 = st.selectbox("Plataforma A", opciones, index=p1_index) if p1_index is not None else None
    p2 = st.selectbox("Plataforma B", opciones, index=p2_index) if p2_index is not None else None

    if p1 is None or p2 is None:
        st.warning("Selecciona al menos dos plataformas para comparar.")
        return

    columnas = ['na_sales', 'eu_sales', 'jp_sales', 'other_sales']
    # Filtra los datos para ambas plataformas
    datos = df_filtered[df_filtered['platform'].isin([p1, p2])]
    # Agrupa por plataforma y suma las ventas por regi칩n, luego transpone el resultado
    resumen = datos.groupby('platform')[columnas].sum().T

    # Crea el gr치fico de barras comparativo
    fig, ax = plt.subplots(figsize=(10, 5))
    resumen.plot(kind='bar', ax=ax)
    ax.set_title("Comparador de ventas por regi칩n")
    ax.set_ylabel("Millones de unidades")
    st.pyplot(fig)

# --- Funci칩n para la distribuci칩n de ventas por plataforma (Histograma/Violin Plot/Box Plot) con selecci칩n m칰ltiple ---
def distribucion_ventas_por_plataforma(df_filtered):
    st.subheader("Distribuci칩n de Ventas por Plataforma para Comparaci칩n")

    # Dropdown para seleccionar el tipo de gr치fico
    tipo_grafico = st.selectbox(
        "Selecciona el tipo de gr치fico",
        ("Violin Plot", "Box Plot", "Histograma") # Se a침adi칩 "Box Plot"
    )

    # Obtiene las plataformas 칰nicas y las ordena para el dropdown de selecci칩n m칰ltiple
    plataformas_disponibles = sorted(df_filtered['platform'].dropna().unique())
    
    # Selecciona las plataformas por defecto para mostrar alguna comparaci칩n
    default_platforms = []
    if len(plataformas_disponibles) >= 2:
        default_platforms = [plataformas_disponibles[0], plataformas_disponibles[1]]
    elif len(plataformas_disponibles) == 1:
        default_platforms = [plataformas_disponibles[0]]

    plataformas_seleccionadas = st.multiselect(
        "Selecciona una o varias plataformas para comparar",
        plataformas_disponibles,
        default=default_platforms # Establece valores predeterminados
    )

    # Verifica si se ha seleccionado al menos una plataforma
    if not plataformas_seleccionadas:
        st.warning("Por favor, selecciona al menos una plataforma para visualizar su distribuci칩n de ventas.")
        return

    # Filtra los datos para las plataformas seleccionadas
    df_plataforma_filtrada = df_filtered[df_filtered['platform'].isin(plataformas_seleccionadas)]

    # Verifica si hay datos para las plataformas seleccionadas en el rango de a침os
    if df_plataforma_filtrada.empty:
        st.warning(f"No hay datos de ventas para las plataformas seleccionadas en el rango de a침os actual. Por favor, elige otras plataformas o ajusta el rango de a침os.")
        return

    # Crea el gr치fico
    fig, ax = plt.subplots(figsize=(12, 7)) # Aumentar tama침o para m칰ltiples violines/histogramas/boxplots

    if tipo_grafico == "Violin Plot":
        # Crea un violin plot de las ventas totales para las plataformas seleccionadas
        sns.violinplot(x='platform', y='total_sales', data=df_plataforma_filtrada, palette='viridis', ax=ax)
        ax.set_title("Distribuci칩n de Ventas Totales por Plataforma (Violin Plot)")
        ax.set_xlabel("Plataforma")
        ax.set_ylabel("Ventas Totales (millones)")
        ax.set_ylim(bottom=0) # Asegura que el eje y empiece en 0

    elif tipo_grafico == "Box Plot": # Nueva opci칩n para Box Plot
        # Crea un box plot de las ventas totales para las plataformas seleccionadas
        sns.boxplot(x='platform', y='total_sales', data=df_plataforma_filtrada, palette='plasma', ax=ax)
        ax.set_title("Distribuci칩n de Ventas Totales por Plataforma (Box Plot)")
        ax.set_xlabel("Plataforma")
        ax.set_ylabel("Ventas Totales (millones)")
        ax.set_ylim(bottom=0) # Asegura que el eje y empiece en 0

    elif tipo_grafico == "Histograma":
        # Para histogramas, superponerlos con transparencia para comparar
        ax.set_title("Histograma de Ventas Totales por Plataforma")
        ax.set_xlabel("Ventas Totales (millones)")
        ax.set_ylabel("Frecuencia")
        
        # Iterar sobre las plataformas seleccionadas y trazar su histograma
        for platform in plataformas_seleccionadas:
            data_to_plot = df_plataforma_filtrada[df_plataforma_filtrada['platform'] == platform]['total_sales']
            sns.histplot(data_to_plot, kde=True, ax=ax, label=platform, alpha=0.5, bins=30)
        ax.legend(title="Plataformas")
        ax.set_ylim(bottom=0) # Asegura que el eje y empiece en 0

    st.pyplot(fig)


# --- L칩gica principal de la aplicaci칩n con la barra lateral ---

# Rango de a침os en la barra lateral
# Aseg칰rate de que min_year y max_year existan y sean enteros antes de usarlos
if not df.empty and 'year_of_release' in df.columns:
    min_year = int(df['year_of_release'].min())
    max_year = int(df['year_of_release'].max())
else:
    min_year = 1980 # Valor por defecto si no hay datos de a침o
    max_year = 2020 # Valor por defecto si no hay datos de a침o
    st.warning("No se pudieron cargar los datos de a침os de lanzamiento. Usando rango de a침os predeterminado.")


st.sidebar.subheader("Filtrar por a침o de lanzamiento")
year_range = st.sidebar.slider(
    "Selecciona un rango de a침os",
    min_value=min_year,
    max_value=max_year,
    value=(min_year, max_year) # Valor inicial del slider
)

# Filtra el DataFrame completo basado en el rango de a침os seleccionado
df_filtered = df[(df['year_of_release'] >= year_range[0]) & (df['year_of_release'] <= year_range[1])]

if df_filtered.empty:
    st.warning("No hay datos para el rango de a침os seleccionado. Por favor, ajusta los filtros.")
else:
    # Selector de m칩dulo en la barra lateral
    modulo = st.sidebar.radio("Selecciona m칩dulo", ["Generales", "Ventas"])

    # Condicional para mostrar las opciones del m칩dulo seleccionado
    if modulo == "Generales":
        opcion = st.sidebar.selectbox("An치lisis general", [
            "Duraci칩n de plataformas",
            "Plataformas activas por a침o",
            "Top plataformas por ventas",
            "Distribuci칩n de ventas por plataforma para comparaci칩n" # T칤tulo actualizado
        ])
        if opcion == "Duraci칩n de plataformas":
            duracion_plataformas(df_filtered)
        elif opcion == "Plataformas activas por a침o":
            plataformas_activas_por_anio(df_filtered)
        elif opcion == "Top plataformas por ventas":
            top_plataformas(df_filtered)
        elif opcion == "Distribuci칩n de ventas por plataforma para comparaci칩n":
            distribucion_ventas_por_plataforma(df_filtered)
    else: # M칩dulo de Ventas
        opcion = st.sidebar.selectbox("An치lisis de ventas", [
            "Ventas por plataforma",
            "Comparador estad칤stico"
        ])
        if opcion == "Ventas por plataforma":
            comparar_ventas_por_plataforma(df_filtered)
        else:
            comparador_estadistico_ventas(df_filtered)

            